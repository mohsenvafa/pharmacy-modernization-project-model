package patient_list

import (
	"net/url"
	patientsmodel "pharmacy-modernization-project-model/domain/patient/contracts/model"
	commonComponents "pharmacy-modernization-project-model/web/components/elements"
	layouts "pharmacy-modernization-project-model/web/components/layouts"
	"strings"
)

type PatientListPageParam struct {
	Patients    []patientsmodel.Patient
	CurrentPage int
	TotalPages  int
	ListPath    string
	DetailPath  func(string) string
	SearchForm  PatientSearchForm
}

type PatientSearchForm struct {
	PatientName string
	BirthDate   string
	State       string
}

templ PatientListPageComponentView(pageParam PatientListPageParam) {
	@layouts.BaseLayout("Patient List", patientList(pageParam))
}

templ patientList(pageParam PatientListPageParam) {
	<div class="flex flex-col gap-4">
		@commonComponents.PageHeader("Patients")
		<!-- Search Form -->
		<section class="card col-span-12 overflow-hidden bg-base-100 shadow-xs">
			<div class="card-body">
				<h2 class="card-title">Search Patients</h2>
				<form method="GET" action={ templ.URL(pageParam.ListPath) } class="grid grid-cols-1 gap-4 md:grid-cols-4">
					<!-- Patient Name -->
					<div class="form-control">
						<label class="label">
							<span class="label-text">Patient Name</span>
						</label>
						<input
							type="text"
							name="patientName"
							value={ pageParam.SearchForm.PatientName }
							placeholder="Enter patient name"
							class="input input-bordered w-full"
						/>
					</div>
					<!-- Birth Date -->
					<div class="form-control">
						<label class="label">
							<span class="label-text">Birth Date</span>
						</label>
						<input
							type="date"
							name="birthDate"
							value={ pageParam.SearchForm.BirthDate }
							class="input input-bordered w-full"
						/>
					</div>
					<!-- State -->
					<div class="form-control">
						<label class="label">
							<span class="label-text">State</span>
						</label>
						@commonComponents.StateDropdown("state", pageParam.SearchForm.State, "select select-bordered w-full")
					</div>
					<!-- Search and Clear Buttons -->
					<div class="form-control">
						<label class="label">
							<span class="label-text">&nbsp;</span>
						</label>
						<div class="flex gap-2">
							<button type="submit" class="btn btn-primary">
								Search
							</button>
							<a href={ templ.URL(pageParam.ListPath) } class="btn btn-outline">
								Clear
							</a>
						</div>
					</div>
				</form>
			</div>
		</section>
		<!-- Patient List -->
		<section class="card col-span-12 overflow-hidden bg-base-100 shadow-xs xl:col-span-7">
			<div class="card-body grow-0">
				<div class="flex justify-between gap-2">
					<h2 class="card-title grow">
						<a class="link-hover link">Recent Patients</a>
					</h2>
				</div>
			</div>
			@commonComponents.DataTable(patientTableColumns, patientTableRows(pageParam.Patients, pageParam.DetailPath))
			@commonComponents.Pagination(commonComponents.PaginationParams{
				CurrentPage: pageParam.CurrentPage,
				TotalPages:  pageParam.TotalPages,
				BasePath:    pageParam.ListPath,
				Query:       buildSearchQuery(pageParam.SearchForm),
			})
		</section>
	</div>
}

templ patientTableRows(pats []patientsmodel.Patient, detailPath func(string) string) {
	for _, pat := range pats {
		<tr>
			<td class="w-0"><input type="checkbox" class="checkbox"/></td>
			<td>
				<div class="flex items-center gap-4">
					<div>
						<div class="text-sm font-bold">
							<a class="link link-hover" href={ templ.URL(detailPath(pat.ID)) }>{ pat.Name }</a>
						</div>
						<div class="text-xs opacity-50">{ pat.Phone }</div>
					</div>
				</div>
			</td>
			<td>{ pat.DOB.Format("Jan 2, 2006") }</td>
			<td>
				@commonComponents.StateNameDisplay(pat.State)
			</td>
		</tr>
	}
}

func buildSearchQuery(form PatientSearchForm) string {
	params := url.Values{}
	if form.PatientName != "" {
		params.Add("patientName", form.PatientName)
	}
	if form.BirthDate != "" {
		params.Add("birthDate", form.BirthDate)
	}
	if form.State != "" {
		params.Add("state", form.State)
	}
	return strings.TrimSuffix(params.Encode(), "&")
}
