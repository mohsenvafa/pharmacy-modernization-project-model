// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreatePatientInput struct {
	Name  string    `json:"name"`
	Dob   time.Time `json:"dob"`
	Phone string    `json:"phone"`
	State string    `json:"state"`
}

type CreatePrescriptionInput struct {
	PatientID string             `json:"patientID"`
	Drug      string             `json:"drug"`
	Dose      string             `json:"dose"`
	Status    PrescriptionStatus `json:"status"`
}

type DashboardStats struct {
	TotalPatients       int `json:"totalPatients"`
	ActivePrescriptions int `json:"activePrescriptions"`
}

type Mutation struct {
}

type Query struct {
}

type UpdatePatientInput struct {
	Name  *string    `json:"name,omitempty"`
	Dob   *time.Time `json:"dob,omitempty"`
	Phone *string    `json:"phone,omitempty"`
	State *string    `json:"state,omitempty"`
}

type UpdatePrescriptionInput struct {
	Drug   *string             `json:"drug,omitempty"`
	Dose   *string             `json:"dose,omitempty"`
	Status *PrescriptionStatus `json:"status,omitempty"`
}

type PrescriptionStatus string

const (
	PrescriptionStatusDraft     PrescriptionStatus = "DRAFT"
	PrescriptionStatusActive    PrescriptionStatus = "ACTIVE"
	PrescriptionStatusPaused    PrescriptionStatus = "PAUSED"
	PrescriptionStatusCompleted PrescriptionStatus = "COMPLETED"
)

var AllPrescriptionStatus = []PrescriptionStatus{
	PrescriptionStatusDraft,
	PrescriptionStatusActive,
	PrescriptionStatusPaused,
	PrescriptionStatusCompleted,
}

func (e PrescriptionStatus) IsValid() bool {
	switch e {
	case PrescriptionStatusDraft, PrescriptionStatusActive, PrescriptionStatusPaused, PrescriptionStatusCompleted:
		return true
	}
	return false
}

func (e PrescriptionStatus) String() string {
	return string(e)
}

func (e *PrescriptionStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PrescriptionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PrescriptionStatus", str)
	}
	return nil
}

func (e PrescriptionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PrescriptionStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PrescriptionStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
